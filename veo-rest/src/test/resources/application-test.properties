veo.etag.salt=rl2xo5fVE3$rf

spring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES=true

spring.datasource.url=jdbc:tc:postgresql:13.14-alpine:///veo?TC_TMPFS=/testtmpfs:rw
spring.datasource.driver-class-name=org.testcontainers.jdbc.ContainerDatabaseDriver
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=1
spring.datasource.password=test
spring.datasource.username=test
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

// turn OSIV off - only the business layer decides the fetching strategy for a particular use case:
spring.jpa.open-in-view=false

// These are dummy URLs for the unit tests. The auth server does not have to exist for the tests to succeed.
// The auth context is replaced by an in-memory implementation for unit tests.
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://auth.veo.example/auth/realms/veo-oidcrealm-example
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://auth.veo.example/auth/realms/veo-oidcrealm-example/protocol/openid-connect/certs

# the selector to select the domaintemplates which get bootstrapped. See org.veo.adapter.service.domaintemplate.DomainTemplateServiceImpl.readTemplateFiles()
veo.domain.file.selector=classpath*:*domaintemplates/*.json
# the domain templates ids (comma separated) which get created in a newly created client. See org.veo.core.usecase.unit.CreateUnitUseCase.createNewClient(InputData)
veo.default.domaintemplate.names=DS-GVO,test-domain
server.servlet.context-path=/veotests/
json.schema.validation.schemaProvider=entityType

spring.main.banner-mode=off
veo.scheduler.active=false

veo.message.consume.autoDelete=true