import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

plugins {
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'groovy'

dependencies {
    implementation project(":veo-adapter")
    implementation project(":veo-persistence")
    implementation project(":veo-message")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'io.swagger.core.v3:swagger-annotations-jakarta'
    implementation 'com.fasterxml.jackson.module:jackson-module-blackbird'
    implementation 'org.apache.commons:commons-lang3'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui'

    testImplementation "org.testcontainers:testcontainers"
    testImplementation 'org.keycloak:keycloak-authz-client'

    testImplementation 'org.spockframework:spock-spring'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.networknt:json-schema-validator'
    testImplementation project(":veo-test")
    testImplementation 'org.apache.groovy:groovy-json'

    testRuntimeOnly "org.testcontainers:spock"
    testRuntimeOnly 'org.testcontainers:postgresql'
}

jar {
    enabled = false
}

bootRun {
    def activeSpringProfiles = 'psql'
    findProperty('springProfiles')?.with { activeSpringProfiles = it }
    System.properties.'spring.profiles.active'?.with { activeSpringProfiles = it }
    systemProperty 'spring.profiles.active', activeSpringProfiles
    systemProperty 'veo.etag.salt', "zu#4Q8JKdy"
    if ( project.hasProperty('jvmArgs') ) {
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    }
}

def continuousIntegrationBuild = rootProject.hasProperty('ci')

// some of the data we include in the build and git info property files make the
// UP-TO-DATE check fail because they change with every build.
// we only need that data for builds that we are going to deploy, so
// we exclude them for the other builds to make them faster
def includeRealInfo = continuousIntegrationBuild && rootProject.getProperty('ciJobName').with {
    it.endsWith('develop') || it=~ /\/\d+\.\d+\.\d+$/
}

// create build-info.properties with build information
springBoot {
    buildInfo {
        properties {
            if (!includeRealInfo) {
                time = null
            }
            // add additional CI information when building in Jenkins
            if (continuousIntegrationBuild) {
                def additionalInfo = [
                    'ci.jobname': rootProject.getProperty('ciJobName')
                ]
                if (includeRealInfo) {
                    additionalInfo.'ci.buildnumber' = rootProject.getProperty('ciBuildNumber')
                }
                additional = additionalInfo
            }
        }
    }
}

// since we're building in Docker containers which don't have a fixed hostname,
// this information is not useful and leads to UP-TO-DATE checks failing
gitProperties {
    keys -= 'git.build.host'
}

// the git properties file contains changing information (like the git commit)
// that causes  UP-TO-DATE checks to fail.
tasks.withType(com.gorylenko.GenerateGitPropertiesTask).all {
    enabled = includeRealInfo
}

test {
    filter {
        excludeTestsMatching "org.veo.rest.test.*"
    }
}

tasks.register('restTest', Test) {
    description = 'Runs REST API integration tests'
    group = 'verification'

    shouldRunAfter test

    filter {
        includeTestsMatching "org.veo.rest.test.*"
    }

    inputs.property("veoBaseUrl") {
        System.getenv("VEO_RESTTEST_BASEURL")
    }.optional(true)

    systemProperties System.properties.subMap([
        "http.proxyHost",
        "http.proxyPort",
        "http.nonProxyHosts",
        "https.proxyHost",
        "https.proxyPort",
        "http.nonProxyHosts"
    ]) + [
        // Enable Origin header for CORS tests
        "sun.net.http.allowRestrictedHeaders": "true"
    ]
}

// specific "continuous integration" settings needed by Jenkins
if (continuousIntegrationBuild) {

    // Update the test result file timestamps so Jenkins picks them up even when doing incremental builds
    task jenkinsRestTestFix {
        inputs.files restTest.outputs.files
        doLast {
            if (!sourceSets.test.allSource.empty) {
                def timestamp = System.currentTimeMillis()
                restTest.reports.junitXml.outputLocation.get().asFile.eachFile { it.lastModified = timestamp }
            }
        }
    }

    restTest {
        finalizedBy jenkinsRestTestFix
    }
}
