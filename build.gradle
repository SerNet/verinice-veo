import groovy.json.JsonSlurper
import org.veo.SpockBlockFormatterStep

plugins {
    id 'org.springframework.boot' version '3.3.1' apply false
    id 'io.spring.dependency-management' version '1.1.6' apply false
    id "com.github.spotbugs" version '6.0.19'
    id "com.diffplug.spotless" version "6.25.0" apply false
    id "io.freefair.lombok" version "8.6"
    id 'com.github.jk1.dependency-license-report' version '2.8'
}

def licenseFile3rdParty = 'LICENSE-3RD-PARTY.txt'

licenseReport {
    renderers = [
        new com.github.jk1.license.render.TextReportRenderer(licenseFile3rdParty),
    ]
    projects = [project]+ project.subprojects.findAll{it.name != 'veo-test'}
    filters = [
        new com.github.jk1.license.filter.LicenseBundleNormalizer()
    ]
}

def continuousIntegrationBuild = rootProject.hasProperty('ci')

allprojects  {
    group = 'org.veo'
    version = '0.48.0-SNAPSHOT'

    apply plugin: "com.diffplug.spotless"

    repositories {
        mavenCentral()
    }

    spotless {
        groovyGradle {
            greclipse()
            replaceRegex('Excessive line breaks', /\n{3,}/, '\n\n')
            indentWithSpaces(4)
            trimTrailingWhitespace()
        }
        java {
            target 'src/**/*.java', 'buildSrc/**/*.java'
            googleJavaFormat()
            importOrder('java', 'jakarta', 'javax', 'org', 'com', 'org.veo', '')
            addStep org.veo.LicenseHeaderStep.create(project.rootDir)
            addStep org.veo.NoWildcardImportsStep.create()
            removeUnusedImports()
            trimTrailingWhitespace()
            replaceRegex('Consecutive empty block comment lines', /( *\*\n){2,}/, '*\n')
            replaceRegex('Empty line at block comment end', / \*\n *\*\//, ' */')
            replaceRegex('Empty comment block', /\/\*+\s+\*\//, '')
            replaceRegex('Empty line after annotation', /(^ +@[a-zA-Z0-9]+\([^)]+\)\n)\n+/, '$1')
            replaceRegex('Empty line inside annotation', /(^ +@[a-zA-Z0-9]+\([^)]+\n)\n+/, '$1')
            replaceRegex('Default value for Schema#required()', /((?<=@Schema\([^)]{1,500}), required = false)|((?<=@Schema\()required = false(, )?)/, '')
        }
        groovy {
            target 'src/**/*.groovy', 'buildSrc/**/*.groovy'
            addStep org.veo.LicenseHeaderStep.create(project.rootDir)
            addStep org.veo.NoWildcardImportsStep.create()
            addStep SpockBlockFormatterStep.create()
            greclipse()
            importOrder('java', 'javax', 'org', 'com', 'org.veo', '')
            indentWithSpaces(4)
            trimTrailingWhitespace()
            replaceRegex('Excessive line breaks', /\n{3,}/, '\n\n')
            replaceRegex('Extra space around equals sign', /(  += )|( =  +)/, ' = ')
            replaceRegex('Not one space between right round and left curly bracket', /\) *\{/, ') {')
        }
        format 'xml', {
            target 'src/**/*.xml', 'misc/eclipse/java-format.xml'
            eclipseWtp('xml')
        }
        format 'git', {
            target '**/.gitignore'

            trimTrailingWhitespace()
            endWithNewline()
        }
        format 'markdown', {
            target '**/*.md'
            targetExclude '**/bin/**', '**/target/**'
            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()
        }
        json {
            target '**/*.json'
            targetExclude '**/bin/**', '**/target/**'
            gson()
                    .indentWithSpaces(2)
            endWithNewline()
        }
        yaml {
            target '.gitlab-ci.yml'
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}

generateLicenseReport {
    outputs.with {
        // work around for license report not being updated when the project's version number changes
        // https://github.com/jk1/Gradle-License-Report/issues/223outputs.with {
        upToDateWhen { false }
        cacheIf { false }
    }
    doLast {
        def dateLinePattern = /(?m)^This report was generated at.+$/
        def newLicenseText = file("${generateLicenseReport.config.outputDir}/${licenseFile3rdParty}").text
        def licenseFile = file(licenseFile3rdParty)
        if (licenseFile.text.replaceAll(dateLinePattern, "") != newLicenseText.replaceAll(dateLinePattern, "")) {
            licenseFile.text = newLicenseText
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'io.freefair.lombok'

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencyManagement {
        dependencies {
            dependency 'io.hypersistence:hypersistence-utils-hibernate-62:3.8.1'
            dependency 'io.jsonwebtoken:jjwt-api:0.12.6'
            dependency 'io.jsonwebtoken:jjwt-impl:0.12.6'
            dependency 'io.jsonwebtoken:jjwt-jackson:0.12.6'
            // pull in fix for https://github.com/spockframework/spock/issues/1539
            dependency "org.spockframework:spock-core:2.4-M4-groovy-4.0"
            dependency "org.spockframework:spock-spring:2.4-M4-groovy-4.0"
            dependency 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
            dependency 'org.springdoc:springdoc-openapi-starter-common:2.6.0'
            dependency 'io.swagger.core.v3:swagger-core-jakarta:2.2.22'
            dependency 'io.swagger.core.v3:swagger-annotations-jakarta:2.2.22'
            dependency 'net.ttddyy:datasource-proxy:1.10'
            dependency 'com.github.victools:jsonschema-generator:4.35.0'
            dependency 'com.github.victools:jsonschema-module-jackson:4.35.0'
            dependency 'com.github.victools:jsonschema-module-jakarta-validation:4.35.0'
            dependency 'com.github.victools:jsonschema-module-swagger-2:4.35.0'
            dependency 'com.networknt:json-schema-validator:1.5.0'
            dependency "org.testcontainers:spock:1.19.8"
            dependency "org.testcontainers:postgresql:1.19.8"
            dependency "org.keycloak:keycloak-authz-client:25.0.1"
            dependency 'com.fasterxml.uuid:java-uuid-generator:5.1.0'
            dependency 'com.github.zafarkhaja:java-semver:0.10.2'
            dependency 'org.apache.commons:commons-collections4:4.4'
            dependency 'org.jgrapht:jgrapht-core:1.5.2'
            dependency 'org.jgrapht:jgrapht-io:1.5.2'
        }
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    repositories {
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(Test) {
        maxHeapSize = '1g'
        useJUnitPlatform()
        systemProperties project.properties.subMap([
            "http.proxyHost",
            "http.proxyPort",
            "https.proxyHost",
            "https.proxyPort"
        ])
        systemProperty 'user.language', 'en'
        systemProperty 'user.country', 'US'
    }

    pmd {
        toolVersion = '7.3.0'
        ruleSetConfig = rootProject.resources.text.fromFile('misc/pmd/rules.xml')
        ruleSets = []
        rulesMinimumPriority = 2
        consoleOutput = true
        sourceSets = project.sourceSets.matching {it.name != 'test'}
    }

    spotbugs.excludeFilter = rootProject.file('misc/spotbugs/exclude.xml')
    spotbugsTest.enabled = false
    // write human readable report on normal builds
    spotbugsMain.reports {
        // Jenkins needs xml reports to detect and display bugs.
        xml.enabled = continuousIntegrationBuild
        html.enabled = !continuousIntegrationBuild
    }

    // specific "continuous integration" settings needed by Jenkins
    if (continuousIntegrationBuild) {
        tasks.withType(Test) {
            testLogging {
                showStandardStreams = true
                exceptionFormat = 'full'
            }
        }
    }

    dependencies {
        compileOnly 'org.slf4j:slf4j-api'
        runtimeOnly 'ch.qos.logback:logback-classic'
        runtimeOnly 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
        runtimeOnly 'ch.qos.logback.contrib:logback-jackson:0.1.5'
        spotbugsPlugins "jp.skypencil.findbugs.slf4j:bug-pattern:1.5.0@jar"
        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0'
    }

    tasks.withType(JavaCompile) {
        configure(options){
            debugOptions.debugLevel = "source,lines,vars"
            // See https://docs.oracle.com/en/java/javase/11/tools/javac.html#GUID-AEEC9F07-CB49-4E96-8BC7-BCC2C7F725C9
            // for a detailed list of linting keys.
            compilerArgs.addAll([
                '-Xlint:all',
                '-Xlint:-serial'
            ])
        }
    }
}
